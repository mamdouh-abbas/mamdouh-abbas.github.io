---
layout: post
title:  "Adding Column Or More To An Existed Table In Rails"
tags: ruby rails migration database add
keywords: ruby rails migrate database
description: Tutorial video will guide you to add column or more to an existed table in Rails Application.
published: true
---

   TAGS:
   
   {% for tag in page.tags %} {{ tag }} {% endfor %}

Related:
<ul>
<li><a href="/2016/04/28/creating_migrating_file_using_generate_migration.html">Creating migration file using generate migration</a></li>
<li><a href="/2016/04/28/creating_migrating_file_using_generating-_model.html">Creation migration file using generate model.</a></li>
<li><a href="/2016/04/28/creating_migrating_file_using_scaffold.html">Creating migration file using scaffold.</a></li>
<li><a href="/2016/04/28/drop_tables_using_migration.html">Drop tables using migration.</a></li>
<li><a href="/2016/04/28/editing_migration_manually.html">Editing migration file manually.<a></li>
<li><a href="/2016/04/28/seeding_tables_in_migration.html">Seeding data into tables via migration.</a></li>
<li><a href="/2016/04/28/joining_two_tables_via_migration.html">Joining two tables via migration.</a></li>
<li><a href="/2016/04/28/migrating_specific_version_or_step.html">Migration specific VERSION or STEP.</a></li>
<li><a href="/2016/04/28/removing_fields_from_tables_via_migration.html">Removing fields from tables via migration.</a></li>
<li><a href="/2016/04/28/setting_rails_environment_via_migration.html">Setting rails environment via migration command.</a></li>
<li><a href="/2016/04/28/setup_reset_and_drop_database.html">Setup, reset and drop database</a></li>
</ul>

<br>
<h3>Adding Column Or More To An Existed Table.</h3>

The general form of `adding` field to table is:

{% highlight ruby %}
rails g migration AddColumnnameToTablename columnname:datatype
{% endhighlight %}

Example, Adding `price` column to `books` table:

Then, `Columnname = Price`
and `Tablename = Books`
and `datatype = float`

{% highlight ruby %}
rails g migration AddPriceToBooks price:float
{% endhighlight %}

Then, 
{% highlight ruby %}
rake db:migrate
{% endhighlight %}

If you need to add `many` columns to table you can use:

{% highlight ruby %}
rails g migration AddDetailsToBooks pages:integer year:integer
{% endhighlight %}

Then, 
{% highlight ruby %}
rake db:migrate
{% endhighlight %}

Note that you can undo this migration back step by step using:

{% highlight ruby %}
rake db:rollback
{% endhighlight %}

This will delete the `price` column from the `books` table in the database itself.

<i style="color:red;">Note, Any `rake db:rollback` may delete stored data in the `targeted` columns and can't be restored again.</i>

Also, You can delete the migration file generated by converting `g`(for generate) to `d` (for destroy) in migration command as:
 
{% highlight ruby %}
rails g AddPriceToBooks price:float
#to be
rails d AddPriceToBooks price:float
{% endhighlight %}

The last line will delete the migration file generted by the first line.

Take a look to this tutorial video:

<iframe width="100%" height="315" src="https://www.youtube.com/embed/RHJXsNd5vFo" frameborder="0" allowfullscreen></iframe>
